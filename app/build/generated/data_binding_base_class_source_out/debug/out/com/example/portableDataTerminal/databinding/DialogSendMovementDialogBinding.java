// Generated by view binder compiler. Do not edit!
package com.example.portableDataTerminal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.portableDataTerminal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogSendMovementDialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText firstStoreEditText;

  @NonNull
  public final EditText nameEditText;

  @NonNull
  public final EditText passwordEditText;

  @NonNull
  public final EditText secondStoreEditText;

  private DialogSendMovementDialogBinding(@NonNull LinearLayout rootView,
      @NonNull EditText firstStoreEditText, @NonNull EditText nameEditText,
      @NonNull EditText passwordEditText, @NonNull EditText secondStoreEditText) {
    this.rootView = rootView;
    this.firstStoreEditText = firstStoreEditText;
    this.nameEditText = nameEditText;
    this.passwordEditText = passwordEditText;
    this.secondStoreEditText = secondStoreEditText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogSendMovementDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogSendMovementDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_send_movement_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogSendMovementDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.first_store_editText;
      EditText firstStoreEditText = ViewBindings.findChildViewById(rootView, id);
      if (firstStoreEditText == null) {
        break missingId;
      }

      id = R.id.name_editText;
      EditText nameEditText = ViewBindings.findChildViewById(rootView, id);
      if (nameEditText == null) {
        break missingId;
      }

      id = R.id.password_editText;
      EditText passwordEditText = ViewBindings.findChildViewById(rootView, id);
      if (passwordEditText == null) {
        break missingId;
      }

      id = R.id.second_store_editText;
      EditText secondStoreEditText = ViewBindings.findChildViewById(rootView, id);
      if (secondStoreEditText == null) {
        break missingId;
      }

      return new DialogSendMovementDialogBinding((LinearLayout) rootView, firstStoreEditText,
          nameEditText, passwordEditText, secondStoreEditText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
